---
- name: Check if user exists
  shell: /usr/bin/getent passwd {{ item.name }} > /dev/null && echo "" || echo {{ item.name }}
  with_items: "{{ user_docker }} + {{ user_ssh }} + {{ user_sftp }}"
  register: tmpvar
  tags:
    - useradd
    - lock

- shell: echo {{ item.stdout }}
  with_items: "{{ tmpvar.results }}"
  register: user_exists
  when: item.stdout != ""
  tags:
    - useradd
    - lock

# unlock users in docker + ssh + sftp
- name: Unlock users
  shell: /usr/bin/getent passwd {{ item.stdout }} > /dev/null && usermod -U {{ item.stdout }} || echo ""
  when: item.stdout|default("") != ""
  with_items: "{{ user_exists.results }}"
  tags:
    - useradd
    - lock

# Add a user with a bash shell, appending groups to the user's groups
- name: Create ssh group
  group: name=userssh state=present
  tags:
    - useradd

- name: Create sftp group
  group: name=usersftp state=present
  tags:
    - useradd

- name: Random passwords
  shell: openssl rand -base64 20
  with_items: "{{ user_exists.results }}"
  when: item.changed
  register: user_passwd
  tags:
    - useradd

- name: Encryped passwords
  shell: mkpasswd --method=SHA-512 {{ item.stdout }}
  with_items: "{{ user_passwd.results }}"
  when: item.stdout is defined
  register: encryped_passwd
  tags:
    - useradd

- name: Add SSH users
  user: name={{ item.0.stdout }} state=present group=userssh groups=userssh comment=ansible password={{ item.1.stdout }} shell=/bin/bash
  with_together: 
    - "{{ user_exists.results }}"
    - "{{ encryped_passwd.results }}"
  when: item.0.stdout is defined
  tags:
    - useradd

- name: Grant administrators docker permission
  shell: usermod -a -G userssh,docker {{ item.name }}
  with_items: "{{ user_docker }}"
  tags:
    - useradd

- name: Update bashrc for userssh group set default group have write permission
  lineinfile: dest=/home/{{ item.name }}/.bashrc line="umask g+w"
  with_items: "{{ user_docker }} + {{ user_ssh }}"
  tags:
    - useradd

- name: Limit SFTP user
  user: name={{ item.name }} state=present group=usersftp groups=usersftp comment=ansible shell=/bin/sh
  with_items: "{{ user_sftp }}"
  tags:
    - useradd

- name: Change sftp home to root owner for jail
  # https://wiki.archlinux.org/index.php/SFTP_chroot
  file:
    path: "/home/{{ item.name }}"
    state: directory
    owner: root
    group: root
  with_items: "{{ user_sftp }}"
  tags:
    - useradd

- name: Website link for ssh user
  file:
    src: /var/www/sites/{{ item.1 }}
    dest: "/home/{{ item.0.name }}/{{ item.1 }}"
    state: link
  with_subelements:
    - "{{ user_docker }} + {{ user_ssh }}"
    - website
  when: item.1|default("") != ""
  tags:
    - useradd
    - addsite

- name: Website dir for sftp user
  file:
    path: "/home/{{ item.0.name }}/{{ item.1 }}"
    state: directory
  with_subelements:
    - user_sftp
    - website
  when: item.1|default("") != ""
  tags:
    - useradd
    - addsite
- shell: mount --bind /var/www/sites/{{ item.1 }} /home/{{ item.0.name }}/{{ item.1 }}
  with_subelements:
    - user_sftp
    - website
  when: item.1|default("") != ""
  ignore_errors: yes
  tags:
    - useradd
    - addsite

# lock users in user_lock
- name: Lock user {{ item.name }}
  shell: usermod -L {{ item.name }}
  when: item.name is defined
  with_items: "{{ user_lock }}"
  tags:
    - useradd
    - lock

- name: Display generated password
  debug: 
    msg: |
      {% set comma = joiner(",") %}
      {% for item in user_exists.results -%}
        {% if item.stdout is defined %}{% set idx = loop.index - 1 %} {{ comma() }} {{ item.stdout }}=>{{ user_passwd.results[idx].stdout }}{% endif %}
      {%- endfor %}
  tags:
    - useradd

# change password
- name: Encryped password from variable
  shell: mkpasswd --method=SHA-512 {{ pass }}
  register: password
  tags:
    - passwd
- name: Change user password for {{ username }}
  user: name={{ name }} state=present password={{ password.stdout }}
  tags:
    - passwd


# unlock single user
- name: Unlock single user
  shell: usermod -U {{ name }}
  when: name is defined
  tags:
    - unlock

# chgrp single user
- name: Change group of user
  user: name={{ name }} state=present groups={{ group }} append=yes comment=ansible
  when: name is defined
  tags:
    - chgrp

- name: Copy user mount script into place.
  template: src=mount.bash.j2 dest=/usr/local/bin/mount.sh owner=root group=root mode=0755
  tags:
    - useradd
    - mount

- name: Copy user mount init script into place.
  template: src=mount.j2 dest=/etc/init.d/mount owner=root group=root mode=0755
  tags:
    - mount

- name: Ensure the user mount is enabled and will start on boot.
  service: name=mount state=started enabled=yes
  tags:
    - mount
